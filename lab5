#define _CRT_SECURE_NO_WARNINGS
#include <windows.h>
#include <string>
#include <fstream>
#include <ctime>
#include <cstdlib>


// Глобальные переменные
HINSTANCE hInst; // Дескриптор приложения
LPCWSTR szTitle = L"WinAPI App"; // Заголовок окна
LPCWSTR szWindowClass = L"WinAPIClass"; // Класс окна
HWND hWnd; // Дескриптор окна
int N = 8; // Размер поля по умолчанию

COLORREF gridColor = RGB(255, 0, 0);     // Красный цвет сетки
COLORREF circleColor = RGB(255, 255, 0); // Желтый цвет круга
COLORREF crossColor = RGB(0, 255, 0);   // Зеленый цвет крестика
COLORREF backgroundColor = RGB(0, 0, 255);  // Синий фон
int windowWidth = 320;  // По умолчанию
int windowHeight = 240; // По умолчанию


std::string configFileName = "data.txt";

// Функция для сохранения конфигурации в файл
void SaveConfig() {
	std::ofstream file(configFileName);
	if (file.is_open()) {
		// Запись размера сетки
		file << N << std::endl;
		// Запись цвета сетки
		file << int(GetRValue(gridColor)) << " " << int(GetGValue(gridColor)) << " " << int(GetBValue(gridColor)) << std::endl;
		// Запись цвета фона
		file << int(GetRValue(backgroundColor)) << " " << int(GetGValue(backgroundColor)) << " " << int(GetBValue(backgroundColor)) << std::endl;
		// Запись ширины и высоты
		file << windowWidth << " " << windowHeight << std::endl;
		file.close();
	}
}

// Функция для загрузки конфигурации из файла
bool LoadConfig() {
	std::ifstream file(configFileName);
	if (!file.is_open()) {
		return false;
	}
	// Чтение размера сетки
	if (!(file >> N)) return false;

	int r, g, b;
	// Чтение цвета сетки
	if (!(file >> r >> g >> b)) return false;
	gridColor = RGB(r, g, b);
	// Чтение цвета фона
	if (!(file >> r >> g >> b)) return false;
	backgroundColor = RGB(r, g, b);
	// Чтение ширины и высоты 
	if (!(file >> windowWidth >> windowHeight)) return false;
	file >> windowWidth >> windowHeight;

	SetWindowPos(hWnd, NULL, 0, 0, windowWidth, windowHeight, SWP_NOMOVE | SWP_NOZORDER);

	file.close();
	return true;
}
// Функция для отрисовки сетки
void DrawGrid(HDC hdc, int width, int height, int cellWidth, int cellHeight)
{
	HPEN hPen = CreatePen(PS_SOLID, 1, gridColor);
	HGDIOBJ hOldPen = SelectObject(hdc, hPen);

	for (int i = 0; i <= N; i++) {
		int x = i * cellWidth;
		int y = i * cellHeight;
		MoveToEx(hdc, x, 0, nullptr); // Перемещаемся в начальную точку
		LineTo(hdc, x, height); // Рисуем вертикальную линию
		MoveToEx(hdc, 0, y, nullptr); // Перемещаемся в начальную точку
		LineTo(hdc, width, y); // Рисуем горизонтальную линию
	}

	SelectObject(hdc, hOldPen);
	DeleteObject(hPen);
}

// Функция для отрисовки круга
void DrawCircle(HDC hdc, int x, int y, int cellWidth, int cellHeight) {
	HBRUSH hCircleBrush = CreateSolidBrush(circleColor); // Создаем кисть для круга
	HGDIOBJ oldBrush = SelectObject(hdc, hCircleBrush); // Сохраняем текущую кисть

	Ellipse(hdc, x, y, x + cellWidth, y + cellHeight); // Рисуем круг

	SelectObject(hdc, oldBrush); // Восстанавливаем исходную кисть
	DeleteObject(hCircleBrush); // Удаляем временную кисть
}

// Функция для отрисовки крестика
void DrawCross(HDC hdc, int x, int y, int cellWidth, int cellHeight) {
	HPEN hCrossPen = CreatePen(PS_SOLID, 2, crossColor); // Создаем перо для крестика
	HGDIOBJ oldPen = SelectObject(hdc, hCrossPen); // Сохраняем текущее перо

	MoveToEx(hdc, x, y, nullptr); // Перемещаемся в начальную точку
	LineTo(hdc, x + cellWidth, y + cellHeight); // Рисуем диагональную линию
	MoveToEx(hdc, x + cellWidth, y, nullptr); // Перемещаемся в начальную точку
	LineTo(hdc, x, y + cellHeight); // Рисуем обратную диагональную линию

	SelectObject(hdc, oldPen); // Восстанавливаем исходное перо
	DeleteObject(hCrossPen); // Удаляем временное перо
}

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {

	// Сделать окно стандартого размера, если не откроется файл
	if (!LoadConfig()) {
		windowWidth = 320;
		windowHeight = 240;
	}


	// Создаем и регистрируем класс окна
	WNDCLASSEX wcex = {
		sizeof(WNDCLASSEX),        // Размер структуры WNDCLASSEX
		CS_HREDRAW | CS_VREDRAW,   // Стиль класса окна: перерисовка при изменении размеров горизонтально и вертикально
		WndProc,                   // Указатель на функцию обработки сообщений окна (WndProc)
		0, 0,                      // Дополнительные параметры
		GetModuleHandle(NULL),     // Дескриптор текущего модуля
		NULL,                      // Иконка окна
		NULL,                      // Курсор окна
		NULL,                      // Фон окна (HBRUSH)
		NULL,                      // Меню окна
		szWindowClass,             // Имя класса окна
		NULL                       // Маленькая иконка окна
	};
	RegisterClassEx(&wcex);  // Регистрируем класс окна с операционной системой

	hInst = hInstance;  // Сохраняем дескриптор текущего экземпляра приложения

	// Создаем окно с параметрами
	hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, windowWidth, windowHeight, NULL, NULL, hInstance, NULL);

	RECT rect;
	rect.left = rect.top = 0;
	rect.right = windowWidth;
	rect.bottom = windowHeight;
	AdjustWindowRectEx(&rect, WS_OVERLAPPEDWINDOW, FALSE, 0);

	int adjustedWidth = rect.right - rect.left;
	int adjustedHeight = rect.bottom - rect.top;

	SetWindowPos(hWnd, NULL, 0, 0, adjustedWidth, adjustedHeight, SWP_NOMOVE | SWP_NOZORDER);


	ShowWindow(hWnd, nCmdShow);  // Отображаем окно на экране с указанным режимом (nCmdShow)
	UpdateWindow(hWnd);  // Обновляем клиентскую область окна

	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0)) {
		TranslateMessage(&msg);  // Переводим специфические сообщения клавиш в символы
		DispatchMessage(&msg);   // Отправляем сообщение для обработки в WndProc
	}

	// Сохраняем конфигурацию в файл перед закрытием
	SaveConfig();
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
	PAINTSTRUCT ps;
	HDC hdc;

	int clickX = 0;
	int clickY = 0;

	RECT rect;
	GetClientRect(hWnd, &rect);
	int cellWidth = rect.right / N;
	int cellHeight = rect.bottom / N;

	hdc = GetDC(hWnd);
	clickX = LOWORD(lParam);
	clickY = HIWORD(lParam);

	switch (message) {
		// Изменение размеров экрана
	case WM_SIZE:
		windowWidth = LOWORD(lParam);
		windowHeight = HIWORD(lParam);
		InvalidateRect(hWnd, nullptr, TRUE);
		break;

		// Отрисовка сетки
	case WM_PAINT:
		hdc = BeginPaint(hWnd, &ps);
		{
			HBRUSH hbr = CreateSolidBrush(backgroundColor);
			FillRect(hdc, &ps.rcPaint, hbr);
			DeleteObject(hbr);

			DrawGrid(hdc, rect.right, rect.bottom, cellWidth, cellHeight);
		}
		EndPaint(hWnd, &ps);
		break;

		// Отрисовка круга
	case WM_LBUTTONDOWN:
		DrawCircle(hdc, (clickX / cellWidth) * cellWidth, (clickY / cellHeight) * cellHeight, cellWidth, cellHeight);
		ReleaseDC(hWnd, hdc);
		break;

		// Отрисовка крестика
	case WM_RBUTTONDOWN:
	{
		DrawCross(hdc, (clickX / cellWidth) * cellWidth, (clickY / cellHeight) * cellHeight, cellWidth, cellHeight);
		ReleaseDC(hWnd, hdc);
	}
	break;

	case WM_KEYDOWN:
		if (wParam == VK_ESCAPE || (wParam == 81 && GetKeyState(VK_CONTROL) < 0)) {
			// Выход из приложения
			SaveConfig();  // Сохраняем конфигурацию перед закрытием
			PostQuitMessage(0);
		}
		else if (wParam == 13) {  // Нажата клавиша ENTER
			srand(static_cast<unsigned>(time(nullptr)));
			backgroundColor = RGB(rand() % 256, rand() % 256, rand() % 256);
			InvalidateRect(hWnd, nullptr, TRUE);
		}
		else if (wParam == 67 && GetKeyState(VK_SHIFT) < 0) {  // Нажата клавиша C с зажатым Shift
			if (GetFileAttributes(TEXT("C:\\Windows\\notepad.exe")) != INVALID_FILE_ATTRIBUTES) { // проверка на то, установлен ли Блокнот у пользователя
				system("notepad.exe");
			}
			else {
				MessageBox(hWnd, TEXT("Notepad.exe не найден на вашем компьютере!"), TEXT("Ошибка"), MB_ICONERROR | MB_OK);
			}
		}
		break;
		// Изменение цвета сетки
	case WM_MOUSEWHEEL:
	{
		int delta = GET_WHEEL_DELTA_WPARAM(wParam);
		int r = GetRValue(gridColor) + delta;
		int g = GetGValue(gridColor) + delta;
		int b = GetBValue(gridColor) + delta;
		gridColor = RGB(r, g, b);

		InvalidateRect(hWnd, nullptr, TRUE);  // Перерисовать окно для применения нового цвета
		SaveConfig();  // Сохраняем новый цвет линий сетки
	}
	break;

	// Очистка фона
	case WM_ERASEBKGND:
	{
		HBRUSH hbr = CreateSolidBrush(backgroundColor);
		FillRect((HDC)wParam, &ps.rcPaint, hbr);
		DeleteObject(hbr);
		return (LRESULT)1;
	}
	break;

	// Закрытие окна
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		return DefWindowProc(hWnd, message, wParam, lParam);
		break;
	}

	return 0;
}
